	一、采用Handler与线程的sleep(long)方法
        二、采用Handler的postDelayed(Runnable, long)方法
        三、采用Handler与timer及TimerTask结合的方法

一、采用Handle与线程的sleep(long)方法
        Handler主要用来处理接受到的消息。这只是最主要的方法，当然Handler里还有其他的方法供实现，有兴趣的可以去查API，这里不过多解释。
        1. 定义一个Handler类，用于处理接受到的Message。
Handler handler = new Handler() {
    public void handleMessage(Message msg) {
        // 要做的事情
        super.handleMessage(msg);
    }
};

2. 新建一个实现Runnable接口的线程类，如下：
 public class MyThread implements Runnable {
    @Override
    public void run() {
        // TODO Auto-generated method stub
       while (true) {
            try {
                Thread.sleep(10000);// 线程暂停10秒，单位毫秒
                Message message = new Message();
                message.what = 1;
                handler.sendMessage(message);// 发送消息
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
   }
}

3. 在需要启动线程的地方加入下面语句：
new Thread(new MyThread()).start();  

4.启动线程后，线程每10s发送一次消息。
-------------------------------------------------


二、采用Handler的postDelayed(Runnable, long) 方法
这个实现比较简单一些：

1. 定义一个Handler类

Handler handler=new Handler();  
Runnable runnable=new Runnable() {  
    @Override  
    public void run() {  
        // TODO Auto-generated method stub  
        //要做的事情  
        //handler.postDelayed(this, 2000);  
    }  


2. 启动计时器
handler.postDelayed(runnable, 2000);//每两秒执行一次runnable.  

3.停止计时器：

handler.removeCallbacks(runnable);  

--------------------------------------------------

三、采用Handler与timer及TimerTask结合的方法

1. 定义定时器、定时器任务及Handler句柄

private final Timer timer = new Timer();  
private TimerTask task;  
Handler handler = new Handler() {  
    @Override  
    public void handleMessage(Message msg) {  
        // TODO Auto-generated method stub  
        // 要做的事情  
        super.handleMessage(msg);  
    }  
};  


2. 初始化计时器任务
task = new TimerTask() {  
    @Override  
    public void run() {  
        // TODO Auto-generated method stub  
        Message message = new Message();  
        message.what = 1;  
        handler.sendMessage(message);  
    }  
};  

3. 启动定时器

timer.schedule(task, 2000, 2000); 


简要说一下上面三步提到的一些内容。
1.定时器任务（TimerTask）顾名思义，就是说当定时器到达指定的时间时要做的工作，这里是想Handler发送一个消息，由Handler类进行处理。
2. java.util.Timer.schedule(TimerTask task, long delay):这个方法是说，dalay/1000秒后执行task.只执行一次。
java.util.Timer.schedule(TimerTask task, long delay, long period)：这个方法是说，delay/1000秒后执行task,然后进过period/1000秒再次执行task，这个用于循环任务，执行无数 次，当然，你可以用timer.cancel();取消计时器的执行。


------------------------------------------------------------------------------



在Android上常用的定时器有两种，一种是系统的AlarmService，一种就是Java.util.Timer了。 

实验1：使用Java.util.Timer。 
在onStart()创创建Timer，每5秒更新一次计数器，并启动。

mTimer = new Timer();         
mTimer.schedule(new TimerTask() {             
            @Override  
            public void run() {  
                ++mCount;  
                mHandler.sendEmptyMessage(0);                 
            }  
        }, 5*1000, 5*1000);   


当连接USB线进行调试时，会发现一切工作正常，每5秒更新一次界面，即使是按下电源键，仍然会5秒触发一次。 当拔掉USB线，按下电源键关闭屏幕后，过一段时间再打开，发现定时器明显没有继续计数，停留在了关闭电源键时的数字。 

实验2：使用AlarmService： 

2.1通过AlarmService每个5秒发送一个广播，setRepeating时的类型为AlarmManager.ELAPSED_REALTIME。 

AlarmManager am = (AlarmManager)getSystemService(ALARM_SERVICE); 
am.setRepeating(AlarmManager.ELAPSED_REALTIME, firstTime, 5*1000, sender);  
拔掉USB线，按下电源键，过一段时间再次打开屏幕，发现定时器没有继续计数。 


2.2setRepeating是的类型设置为AlarmManager.ELAPSED_REALTIME_WAKEUP 

AlarmManager am = (AlarmManager)getSystemService(ALARM_SERVICE);  
am.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, firstTime, 5*1000, sender);  
拔掉USB线，按下电源键，过一点时间再次打开屏幕，发现定时器一直在计数。 

如此看来，使用WAKEUP才能保证自己想要的定时器一直工作，但是肯定会引起耗电量的增加。 


